#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import os
import time
import sys
import subprocess
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
class work:
    def __init__(self, app_name, option):
        self.apps = ["corottos", "fm", "facilmedica"]
        self.apps_route_name = {"corottos" : "corottos-web-app" , "fm" : "facilmedica-web-app", "facilmedica" : "facilmedica-web-app"}
        self.working_route = "/home/keeeevin/Documents/nokoarts/"
        self.slack = "nokoarts.slack.com/"
        self.jell = "jell.com"
        self.commands = {"init" : self.init,
                         "migrate" : self.migrate,
                         "reset" : self.reset,
                         "pg" : self.pg}
        if app_name in self.apps:
            self.commands[option](self.working_route + self.apps_route_name[app_name])
        else:
            print("¿Algún proyecto nuevo?")

    def init(self, route):
        print(route)
        self.command(route, "google-chrome " + self.slack)
        self.command(route, "google-chrome " + self.jell)
        self.command(route, "chromium ")
        for i in range(3):
            self.subliminal()
        self.command(route, "atom .")
        self.command(route, " gnome-terminal --window-with-profile=kevin -e \"docker-compose up\"")
        self.command(route, " gnome-terminal")

    def migrate(self, route):
        self.command(route, "gnome-terminal")
        #print "\033[0;0H"
    def reset(self):
        pass
    def pg(self):
        pass
    def subliminal(self):
        print(bcolors.OKGREEN + "/$$      /$$  /$$$$$$  /$$$$$$$  /$$   /$$\n\
| $$  /$ | $$ /$$__  $$| $$__  $$| $$  /$$/\n\
| $$ /$$$| $$| $$  \ $$| $$  \ $$| $$ /$$/ \n\
| $$/$$ $$ $$| $$  | $$| $$$$$$$/| $$$$$/  \n\
| $$$$_  $$$$| $$  | $$| $$__  $$| $$  $$  \n\
| $$$/ \  $$$| $$  | $$| $$  \ $$| $$\  $$ \n\
| $$/   \  $$|  $$$$$$/| $$  | $$| $$ \  $$ \n\
|__/     \__/ \______/ |__/  |__/|__/  \__/ " + bcolors.ENDC)

    def execommand(self, route, command):
        pid_nuevo = os.fork()
        print(pid_nuevo)
        if pid_nuevo == 0:
            print(self.command(route, command))
        else:
            print(bgcolors.OKBLUE + "Getting the work done.. " + bgcolors.ENDC +  command)


    def command(self, route, command):
        print(bcolors.OKBLUE + "Getting the work done.. " +  command + bcolors.ENDC)
        child = subprocess.Popen("cd " + route + " && " + command, shell=True, stdout=subprocess.PIPE)

parser = argparse.ArgumentParser(prog='work', usage='%(prog)s [options]',description='Script to improve my productivity at work.')
parser.add_argument('-a','--app',dest='app_name',type=str, required = True, help='App name to set up')
parser.add_argument('-o','--opc',dest='option', type=str, default="init", help='')
args = parser.parse_args()

workit = work(args.app_name, args.option);
